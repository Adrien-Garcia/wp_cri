@charset "UTF-8";.h1 a,.h2 a,.h3 a,.h4 a,a.btn-1,h1 a,h2 a,h3 a,h4 a{text-decoration:none}.h1,h1{font-size:2.5em;line-height:1.333em;color:#000}.h2,h2{font-size:1.75em;line-height:1.4em;margin-bottom:.375em;color:#e1e1e1}.h3,h3{font-size:1.125em;color:#666}.h4,h4{font-size:1.1em;color:#333}.h1,.h2,.h3,.h4,h1,h2,h3,h4{text-rendering:optimizelegibility;font-weight:500}a,a:visited{color:#2980b9}a:focus,a:hover,a:visited:focus,a:visited:hover{color:#216693;outline:0}a:link,a:visited:link{-webkit-tap-highlight-color:rgba(0,0,0,.3)}ol,ul{margin:20px 0 20px 20px}ol li,ul li{position:relative;padding:0 0 0 15px;list-style-type:none}ol li:before,ul li:before{content:"\25CF";position:absolute;top:0;left:0}ol li ol li:before,ol li ul li:before,ul li ol li:before,ul li ul li:before{content:"-"}p{text-color:#292929;-ms-word-break:break-all;-ms-word-wrap:break-all;word-break:break-word;word-break:break-word;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;-webkit-hyphenate-before:2;-webkit-hyphenate-after:3;hyphenate-lines:3;-webkit-font-feature-settings:"liga","dlig";-moz-font-feature-settings:"liga=1, dlig=1";-ms-font-feature-settings:"liga","dlig";-o-font-feature-settings:"liga","dlig";font-feature-settings:"liga","dlig"}a.btn-1{display:inline-block;position:relative;font-family:Arial,"Helvetica Neue",Helvetica,sans-serif;font-size:16px;line-height:20px;font-weight:400;padding:5px 24px;border-radius:4px;border:0;cursor:pointer;-webkit-transition:all .14s ease-in-out;transition:all .14s ease-in-out;background:#666;color:#000}a.btn-1:focus,a.btn-1:hover{color:#fff;background:gray;text-decoration:none}.mce-content-body .alignleft,.mce-content-body img.alignleft{margin-right:1.5em;display:inline;float:left}.mce-content-body .alignright,.mce-content-body img.alignright{margin-left:1.5em;display:inline;float:right}.mce-content-body .aligncenter,.mce-content-body img.aligncenter{margin-right:auto;margin-left:auto;display:block;clear:both}
/*# sourceMappingURL=data:application/json;base64, */